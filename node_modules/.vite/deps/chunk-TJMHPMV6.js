import {
  writeAndUnwriteText
} from "./chunk-DWHKQ65Q.js";
import {
  animationSetup,
  makeNestedStaticElementsVisible,
  rng
} from "./chunk-SJDQO3DF.js";

// node_modules/svelte-typewriter/helpers/getRandomElement.js
var alreadyChoosenTexts = [];
var getRandomElement = (elements) => {
  while (true) {
    const randomIndex = rng(0, elements.length);
    const isTextDifferentFromPrevious = typeof alreadyChoosenTexts === "number" && randomIndex !== alreadyChoosenTexts;
    const isTextFirstTime = Array.isArray(alreadyChoosenTexts) && !alreadyChoosenTexts.includes(randomIndex);
    const hasSingleChildElement = elements.length === 1;
    const shouldAnimate = hasSingleChildElement || isTextFirstTime || isTextDifferentFromPrevious;
    if (shouldAnimate) {
      isTextDifferentFromPrevious && (alreadyChoosenTexts = []);
      alreadyChoosenTexts.push(randomIndex);
      const randomText = elements[randomIndex];
      return randomText;
    }
    const restartRandomizationCycle = alreadyChoosenTexts.length === elements.length;
    restartRandomizationCycle && (alreadyChoosenTexts = alreadyChoosenTexts.pop());
  }
};

// node_modules/svelte-typewriter/modes/loopRandom.js
var loopRandom = async (node, props) => {
  const { options, elements } = animationSetup(node, props);
  while (true) {
    makeNestedStaticElementsVisible(node);
    const element = getRandomElement(elements);
    await writeAndUnwriteText(element, options);
  }
};
var loopRandom_default = loopRandom;

export {
  loopRandom_default
};
//# sourceMappingURL=chunk-TJMHPMV6.js.map
